@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/UILayout/_UILayout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container-fluid">
    <div class="row px-xl-5">

        @await Component.InvokeAsync("_ShoppingCartProductListComponentPartial")

        @*    @await Component.InvokeAsync("_ShoppingCartDiscountCouponComponentPartial") *@

        @await Html.PartialAsync("~/Views/Discount/ConfirmDiscountCoupon.cshtml");

    </div>
</div>
<!-- Cart End -->
<script>
  const CartHelper = {
    formatCurrency: (amount) => {
        return isNaN(amount) || amount === null ? "0.00 ₺" : `${Number(amount).toFixed(2)} ₺`;
    },
    parseAmount: (amountStr) => {
        if (!amountStr || typeof amountStr !== 'string') return 0;
        return parseFloat(amountStr.replace(/[^\d.,]/g, '').replace(',', '.')) || 0;
    }
};

function showNotification(message, type = 'success') {
    Toastify({
        text: message,
        duration: 3000,
        gravity: "top",
        position: "right",
        style: {
            background: type === 'success' ? "#20c997" : "#ff6b6b",
            borderRadius: '4px',
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }
    }).showToast();
}

function handleQuantityChange(inputId, change) {
    const quantityInput = document.getElementById(inputId);
    if (!quantityInput) return;

    let currentQuantity = parseInt(quantityInput.value) || 0;
    let newQuantity = currentQuantity + change;

    if (newQuantity < 1) {
        showNotification("Minimum miktar 1 olmalıdır!", 'error');
        newQuantity = 1;
    }

    quantityInput.value = newQuantity;

    const row = quantityInput.closest('tr');
    if (!row) return;

    updateRowAndTotals(row, newQuantity);
}

function updateRowAndTotals(row, newQuantity) {
    const unitPriceElement = row.querySelector(".unit-price");
    if (!unitPriceElement) return;

    const unitPrice = CartHelper.parseAmount(unitPriceElement.innerText);
    const totalPriceElement = row.querySelector(".total-price");
    const newTotal = newQuantity * unitPrice;

    totalPriceElement.innerText = CartHelper.formatCurrency(newTotal);
    updateTotalPrices();
}

function updateTotalPrices() {
    let subtotal = 0;
    document.querySelectorAll('.total-price').forEach(element => {
        subtotal += CartHelper.parseAmount(element.innerText);
    });

    const taxRate = 10;
    const taxAmount = (subtotal * taxRate) / 100;
    const totalWithTax = subtotal + taxAmount;

    const discountRateElement = document.getElementById('discountRate');
    const discountRate = discountRateElement ? parseFloat(discountRateElement.innerText) : 0;
    const discountAmount = (totalWithTax * discountRate) / 100;
    const finalTotal = totalWithTax - discountAmount;

    document.getElementById('totalPrice').innerText = CartHelper.formatCurrency(subtotal);
    document.getElementById('taxAmount').innerText = CartHelper.formatCurrency(taxAmount);
    document.getElementById('totalPriceWithTax').innerText = CartHelper.formatCurrency(totalWithTax);
    document.getElementById('totalNewPriceWithDiscount').innerText = CartHelper.formatCurrency(finalTotal);
}

const buttonClickHandler = function(event) {
    event.preventDefault();
    const button = event.currentTarget;
    const inputId = button.dataset.inputId;
    const change = parseInt(button.dataset.change, 10);
    handleQuantityChange(inputId, change);
};

document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.btn-minus, .btn-plus');
    buttons.forEach(button => {
        button.replaceWith(button.cloneNode(true));
    });

    document.querySelectorAll('.btn-minus, .btn-plus').forEach(button => {
        button.addEventListener('click', buttonClickHandler, false);
    });

    const quantityInputs = document.querySelectorAll('.quantity');
    quantityInputs.forEach(input => {
        input.value = Math.max(1, parseInt(input.getAttribute('data-initial-quantity')) || 1);
        const row = input.closest('tr');
        updateRowAndTotals(row, parseInt(input.value));
    });

    updateTotalPrices();

    const applyCouponButton = document.getElementById('applyCouponButton');
    if (applyCouponButton) {
        applyCouponButton.addEventListener('click', () => {
            const code = document.getElementById('discountCode')?.value;
            if (!code) {
                showNotification("Lütfen kupon kodu giriniz!", 'error');
                return;
            }

            fetch('/Discount/ConfirmDiscountCoupon', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `code=${encodeURIComponent(code)}`
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification("Kupon başarıyla uygulandı!");
                        document.getElementById('discountRate').innerText = data.discountRate;
                        updateTotalPrices();
                    } else {
                        showNotification(data.message || "Kupon uygulanamadı!", 'error');
                    }
                })
                .catch(() => {
                    showNotification("Kupon uygulanırken bir hata oluştu!", 'error');
                });
        });
    }
});

</script>









